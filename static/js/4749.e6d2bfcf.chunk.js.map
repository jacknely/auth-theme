{"version":3,"file":"static/js/4749.e6d2bfcf.chunk.js","mappings":"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","sources":["KcApp/Register.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["// This is a copy paste from https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/components/Register.tsx\n// It is now up to us to implement a special behavior to leverage the non standard authorizedMailDomains\n// provided by the plugin: https://github.com/micedre/keycloak-mail-whitelisting installed on our keycloak server.\n// Note that it is no longer recommended to use register.ftl, it's best to use register-user-profile.ftl\n// See: https://docs.keycloakify.dev/realtime-input-validation\n\nimport { memo } from \"react\";\nimport Template from \"keycloakify/lib/components/Template\";\nimport type { KcProps } from \"keycloakify\";\nimport type { KcContext } from \"./kcContext\";\nimport { clsx } from \"keycloakify/lib/tools/clsx\";\nimport type { I18n } from \"./i18n\";\n\ntype KcContext_Register = Extract<KcContext, { pageId: \"register.ftl\"; }>;\n\nconst Register = memo(({ kcContext, i18n, ...props }: { kcContext: KcContext_Register; i18n: I18n; } & KcProps) => {\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={clsx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={clsx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={clsx(props.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={clsx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={clsx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={clsx(props.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={clsx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={clsx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={clsx(props.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={clsx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={clsx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={clsx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={clsx(props.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={clsx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={clsx(props.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    props.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={clsx(props.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={clsx(props.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(props.kcFormOptionsClass)}>\n                            <div className={clsx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(props.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["Register","memo","kcContext","i18n","props","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","doFetchDefaultThemeResources","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}